@inherits ComputedStateComponent<string?>

<MudListItem T="Queue">
    <MudGrid>
        <MudItem xs="8" >
            <MudText>@Queue.QueueName</MudText>
            <MudText Typo="Typo.body2">@Queue.Namespace</MudText>
            @if(State.Value != null)
            {
                <MudText Color="Color.Error">
                    @State.Value
                </MudText>
            }
        </MudItem>
        <MudItem xs="4" class="d-flex justify-end">
            <MudButton OnClick="RemoveQueue">Remove</MudButton>
        </MudItem>
    </MudGrid>
</MudListItem>

@code {
    [Parameter]
    public Queue Queue { get; set; } = null!;

    [Inject]
    public SelectedQueuesService Service { get; set; } = null!;

    [Inject]
    public QueueErrors QueueErrors { get; set; } = null!;

    private async Task RemoveQueue()
    {
        await Service.Remove(Queue);
    }
    protected async override Task<string?> ComputeState(CancellationToken cancellationToken)
    {
        return await QueueErrors.GetError(Queue);
    }
}
