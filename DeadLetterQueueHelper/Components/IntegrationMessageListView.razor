@inherits ComputedStateComponent<IReadOnlyList<IntegrationMessage>>;

@if (State.HasValue)
{
    <table>
        <thead>
            <tr>
                <th>Expand</th>
                <th>Subject</th>
                <th>Id</th>
                <th>First enqueued</th>
                <th>Dead letter reason</th>
                <th>Attempts</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var message in State.Value)
            {
                <IntegrationMessageView Message="message" />
            }
        </tbody>
    </table>
}
else
{
    <div>Loading...</div>
}


@code {
    [Inject]
    public IntegrationMessageService IntegrationMessageService { get; set; } = null!;

    bool _hasRendered = false;

    protected override void OnAfterRender(bool firstRender)
    {
        _hasRendered = true;
        if (firstRender)
            State.Recompute();
    }

    protected override async Task<IReadOnlyList<IntegrationMessage>> ComputeState(CancellationToken cancellationToken)
    {
        if (!_hasRendered)
        {
            // no clue why I need to delay the first call to the fusion service
            // but if I don't do it I get a null ref exception
            return [];
        }

        var result = await IntegrationMessageService.GetFailedMessages();
        return result;
    }
}
