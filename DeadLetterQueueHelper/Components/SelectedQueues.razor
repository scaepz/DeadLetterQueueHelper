@inherits ComputedStateComponent<List<DeadLetterQueueHelper.State.Models.Queue>>

<MudContainer>
    <MudText Typo="Typo.h4" Class="pb-2">Add a queue to poll for failed messages</MudText>
    <MudPaper>
        <MudForm @ref=Form @onsubmit=AddQueue Class="pa-4">

            <MudInputLabel for="nameSpaceInput">Service Bus Namespace</MudInputLabel>
            <MudTextField Required="true" Variant="Variant.Outlined" name="nameSpaceInput" @bind-Value="InputNamespace" />
            <MudInputLabel Class="mt-3" for="queueInput">Queue name</MudInputLabel>
            <MudTextField Required="true" Variant="Variant.Outlined" name="queueInput" @bind-Value=InputQueueName />
            <MudButton Class="mt-6 align-self-center" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddQueue">Add queue</MudButton>
        </MudForm>
    </MudPaper>

    <MudText Typo="Typo.h4" Class="mt-12 pb-2">Queues being polled</MudText>
    <MudPaper>
        <MudList T="Queue" ReadOnly="true" Gutters="true">
            @foreach (var queue in Queues)
            {
                <QueueListItem Queue=queue />
            }
        </MudList>
    </MudPaper>
</MudContainer>
@code {
    [Inject]
    public SelectedQueuesService SelectedQueuesService { get; set; } = null!;

    private MudForm Form { get; set; } = null!;

    private string InputQueueName { get; set; } = "";
    private string InputNamespace { get; set; } = "";

    private List<DeadLetterQueueHelper.State.Models.Queue> Queues => State.Value ?? [];

    protected override async Task<List<DeadLetterQueueHelper.State.Models.Queue>> ComputeState(CancellationToken cancellationToken)
    {
        return await SelectedQueuesService.GetSelectedQueues();
    }


    private async Task AddQueue()
    {
        await Form.Validate();
        if (Form.IsValid)
        {
            await SelectedQueuesService.Add(new(InputNamespace, InputQueueName));

            InputNamespace = "";
            InputQueueName = "";
        }
    }


    private async Task RemoveQueue(Queue queue)
    {
        await SelectedQueuesService.Remove(new(InputNamespace, InputQueueName));
    }
}
